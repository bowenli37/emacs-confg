#+TAGS: EXPERIMENTAL(e) DEPRECATED(d) SUBMODULE(s)
#+EXCLUDE_TAGS: DEPRECATED

* Tasks
** Archive                                                         :ARCHIVE:
*** DONE Problem with reftext org-mode-hook keeping bullets from loading   
CLOSED: [2013-07-17 Wed 18:45]
:PROPERTIES:
:ARCHIVE_TIME: 2013-07-17 Wed 18:47
:END:
  [[file:~/org/work/time.org::*Traffic%20Content%20scripts][Traffic Content scripts]]
*** DONE Add guide-key bindings for Gnus
CLOSED: [2013-08-12 Mon 16:41]
:PROPERTIES:
:ARCHIVE_TIME: 2013-08-12 Mon 16:41
:END:
  [[file:~/.emacs.d/emacs.org::*Guide%20Key][Guide Key]]
*** DONE Figure out auto-login with twittering mode 
CLOSED: [2013-08-07 Wed 13:44]
:PROPERTIES:
:ARCHIVE_TIME: 2013-08-12 Mon 16:41
:END:
*** DONE Figure out/Fix EMMS playlist support
CLOSED: [2013-08-07 Wed 13:44]
:PROPERTIES:
:ARCHIVE_TIME: 2013-08-12 Mon 16:42
:END:
** TODO Open issues with move to org tangle for initialization [3/7]
  + [X] Can we move ~/.gnus into this file and tangle it out to .gnus on load?
  + [ ] For long Variable initializations can we keep an org-table somewhere and just noweb it in?
  + [X] Review [[*Org%20Capture][Org Capture]] functionality
  + [ ] Is [[*Org%20Export][Org Export]] functionality still valid given 8.0.3?
  + [ ] Is the Python [[*General][General]] section still nessisary?
  + [ ] Is [[*Virtualenv][Virtualenv]] section relevant given inclusion of elpy library?
  + [X] Make theme only load if we are in XEmacs
  + [ ] loading theme with emacsclient?
** TODO Re-enable/fix org-mode and reftex mode hook
[[*Bibtex][See Code Block]]
See FAQ (search "reftex") - http://orgmode.org/worg/org-faq.html
** TODO Get guide-key bindings properly hooked into gnus
  [[file:~/.emacs.d/emacs.org::*Guide%20Key][Guide Key]]

** TODO Update Swank
** TODO Create stripped down LATEX subtree export template
  [[file:~/org2/research.org::*PHI%20Validator%20install%20and%20description][PHI Validator install and description]]

  #+BEGIN_EXAMPLE
  
  :EXPORT_FILE_NAME: .research/assistantship/phi_validator_tex/phi_validator
  :EXPORT_OPTIONS: toc:nil ^:nil author:nil timestamp:nil

  #+END_EXAMPLE

  C-c C-e #  - what does this run/where are the docs?
** TODO Emacs-Jedi - possibly easier than elpy?
git@github.com:tkf/emacs-jedi.git  
[[file:~/.emacs.d/emacs.org::*Opportunities%20for%20Improvement][Opportunities for Improvement]]
** TODO Read widget documentation for KEYWORD selection in refmanager-mode
  [[info:widget#Introduction]]
** TODO File Bug report - contents in this function might be empty if line item is blank
  
  [[file:~/.emacs.d/lib/org/lisp/ox-md.el::(org-trim%20(replace-regexp-in-string%20"^"%20"%20"%20contents)))))][file:~/.emacs.d/lib/org/lisp/ox-md.el::(org-trim (replace-regexp-in-string "^" " " contents)))))]]

*** Eg:
+ A list
+ of items
+ that has a trailing
+ 
** DONE Fix refmanager-bibtex-to-org to include bibtex src
CLOSED: [2013-10-09 Wed 17:23]
CLOCK: [2013-10-09 Wed 15:33]--[2013-10-09 Wed 17:23] =>  1:50
:PROPERTIES:
:CATEGORY: Process
:END:  
  [[file:~/org2/references.org::*Card,%20David%20and%20Krueger,%20Alan%20B.%20::%20Minimum%20Wages%20and%20Employment:%20A%20Case%20Study%20of%20the%20Fast-Food%20Industry%20in%20New%20Jersey%20and%20Pennsylvania.%20(2007)][Card, David and Krueger, Alan B. :: Minimum Wages and Employment: A Case Study of the Fast-Food Industry in New Jersey and Pennsylvania. (2007)]]
** TODO Add an end-of-buffer or whatever statement to ipython defadvice so we don't try to paste in the middle of the buffer
** TODO Set up mathjax config as a noweb call into the emacs lisp so we can edit the JS in native mode 
  
  [[file:~/.emacs.d/emacs.org::*org-html-mathjax-template][org-html-mathjax-template]]
** TODO Check out online org-config for other nuggets
:PROPERTIES:
:CATEGORY: Process
:END:
  http://doc.norang.ca/org-mode.html
* Opportunities for Improvement
:PROPERTIES:
:CATEGORY: Process
:END:
** Archive                                                          :ARCHIVE:
*** DONE Add IDO ubiquitous
CLOSED: [2013-07-17 Wed 18:40]
:PROPERTIES:
:ARCHIVE_TIME: 2013-07-17 Wed 18:40
:END:
*** DONE Set up guide-key for helping learn org-mode etc
CLOSED: [2013-07-17 Wed 19:09]
:PROPERTIES:
:ARCHIVE_TIME: 2013-07-17 Wed 19:10
:END:
[[https://github.com/kbkbkbkb1/guide-key][Github here]]
*** DONE Mu4e disable auto-fill
CLOSED: [2013-07-17 Wed 19:10]
:PROPERTIES:
:ARCHIVE_TIME: 2013-07-17 Wed 19:10
:END:
  
  [[file:~/mail/ualbany/Drafts/cur/20130715-ccc6fe-carasgaladon:2,DS]]
** DONE Potential Slide presentation module for emacs           :backburner:
CLOSED: [2013-10-05 Sat 20:47]
  git@github.com:dengste/doc-present.git
** DONE Reveal.js presentations etc
CLOSED: [2013-10-05 Sat 21:15]
CLOCK: [2013-10-05 Sat 19:32]--[2013-10-05 Sat 21:15] =>  1:43
** TODO Ditaa and org-babel for presentation stuffs
CLOCK: [2013-10-06 Sun 10:04]--[2013-10-06 Sun 10:37] =>  0:33
** TODO Install Skewer                                          :backburner:
  github: https://github.com/skeeto/skewer-mode

** TODO Emacs UNDO tree                                         :backburner:
** TODO Install View Large File Improved                        :backburner:
  [[https://github.com/m00natic/vlfi][On Github]]
  [[file:~/org2/research.org::*Meeting%20with%20Project%20Petition][Meeting with Project Petition]]
** TODO Finally get on top of dired                             :backburner:
** TODO Install Web-mode                                        :backburner:
correct php/html indentation (get from master)
** TODO Must learn Prop/TODO matching language                  :backburner:
  [[info:org#Matching%20tags%20and%20properties][info:org#Matching tags and properties]]
  + eg: TODO="COMPLETE"&CLOSED>="<-7d>" for last seven days of completed tags
  + can we store these searches?
** TODO Light weight Java (does not require eclipse)            :backburner:
https://github.com/baohaojun/ajoke
* Things I Often Forget
** Diacritic marks in emacs
  [2013-07-12 Fri]
+ Example:  C-x 8 "O   -> Ã–
+ Also:     C-x 8 C-h  -- gives list of 
+ See:      [[http://www.masteringemacs.org/articles/2010/10/13/diacritics-in-emacs/][Diacritics in Emacs]]

** Subtree export - specify file name/location
*** EXAMPLE :: PHI Validator install and description
:PROPERTIES:
:EXPORT_FILE_NAME: .research/assistantship/phi_validator_tex/phi_validator
:EXPORT_OPTIONS: toc:nil ^:nil author:nil timestamp:nil
:END:

** Export org-mode to docx (with bibliography)
*** to .docx                                                     :noexport:
#+NAME: tex-file
#+BEGIN_SRC elisp
(file-truename (org-latex-export-to-latex))
#+END_SRC

#+NAME: export-to-docx
#+BEGIN_SRC sh :results silent :var INFILE=tex-file
/usr/bin/pandoc -f latex -t docx --bibliography=references.bib --csl=iso690-numeric-en.csl -i $INFILE -o $(echo $INFILE | sed -e "s/tex$/docx/")
#+END_SRC

* Utility Functions
** toggle-frame-split
#+BEGIN_SRC emacs-lisp
(defun toggle-frame-split ()
  "If the frame is split vertically, split it horizontally or vice versa.
Assumes that the frame is only split into two."
  (interactive)
  (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
  (let ((split-vertically-p (window-combined-p)))
    (delete-window) ; closes current window
    (if split-vertically-p
        (split-window-horizontally)
      (split-window-vertically)) ; gives us a split with the other window twice
    (switch-to-buffer nil)))
#+END_SRC
* Initialization
** Header
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Generated from emacs.org
;;;;
;;;;  do not edit this file!
;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
** Default Settings
*** General
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(show-paren-mode t)
(column-number-mode t)
(global-auto-revert-mode t)
(setq indent-tabs-mode nil)
(put 'downcase-region 'disabled nil)
(fset 'yes-or-no-p 'y-or-n-p)
; (setq enable-recursive-minibuffers t)
#+END_SRC
*** Autosave
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
*** Grep
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c g") 'grep)

(define-key minibuffer-local-map (kbd "M-i") 'minibuffer-insert-ido-filename)
(defun minibuffer-insert-ido-filename()
  (interactive)
  (insert (ido-read-file-name "File: ")))

#+END_SRC
** XEmacs related
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode)
    (menu-bar-mode 0))

(if (fboundp 'tool-bar-mode)
    (tool-bar-mode 0) )

(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode 0))

#+END_SRC

*** X Fullscreen functionality                                   :DEPRECATED:
    :PROPERTIES:
    :tangle:   no
    :END:

    Note: Not needed with tiling windows managers

#+NAME: x-fullscreen-funcionality
#+BEGIN_SRC emacs-lisp
(if (fboundp 'x-send-client-message)
    (defun fullscreen ()
      (interactive)
      (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                             '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

  (global-set-key [f11] 'fullscreen)
  (global-set-key [XF86Save] 'fullscreen))

(if (and (eq window-system 'X)
         (fboundp 'fullscreen))
    (fullscreen))

#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

(add-to-list 'default-frame-alist '(alpha  . 90))

#+END_SRC

** ELPA Package Support
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
(require 'package)
(package-initialize)

#+END_SRC

** Winner Mode
#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode 1))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x |") 'toggle-frame-split)
#+END_SRC
* Theme
  Only load themes if we have the color depth to support it
  ie.  Only load theme if we're running xemacs

#+BEGIN_SRC emacs-lisp
(when (> (display-color-cells) 256)
       (load-theme 'wombat t))
#+END_SRC
** Color Themes
*** Zenburn                                                     :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/lib/themes/zenburn/")
#+END_SRC
*** Noctilux                                                    :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/lib/themes/noctilux/")
#+END_SRC
*** Solarized                                                   :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/lib/themes/solarized/")
#+END_SRC
*** Base16                                                      :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/lib/themes/base16/") 
#+END_SRC
* Org Mode                                                        :SUBMODULE:
  :PROPERTIES:
  :LAST-UPDATED: [2013-06-05 Wed]
  :VERSION: 8.0.3
  :END:
** TODO Review Org Mode Version
SCHEDULED: <2013-11-05 Tue +1m>
- State "DONE"       from "TODO"       [2013-08-07 Wed 12:57]
- State "DONE"       from "TODO"       [2013-08-07 Wed 12:57]
- State "DONE"       from "TODO"       [2013-08-07 Wed 12:57]
- State "DONE"       from "TODO"       [2013-07-26 Fri 08:34]
- State "DONE"       from "TODO"       [2013-07-22 Mon 15:21]
:PROPERTIES:
:LAST_REPEAT: [2013-08-07 Wed 12:57]
:END:

** Org Babel Bibtex
:PROPERTIES:
:ID:       71f1d1c5-288f-49cf-8883-e386d53c2e40
:END:
Ripped wholesale from [[file:lib/org/lisp/ob-css.el][ob-css.el]]
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/lib/ob-bibtex.el
;; Do Not Edit this file,  this file is auto generated from
;; ~/.emacs.d/emacs.org 

(require 'ob)

(defvar org-babel-default-header-args:bibtex '())

(defun org-babel-execute:bibtex (body params)
  "Execute a block of bibtex code.
This function is called by `org-babel-execute-src-block'."
  body)

(defun org-babel-prep-session:bibtex(session params)
  "Return an error if the :session header argument is set.
bibtex does not support sessions."
  (error "Bibtex sessions are nonsensical"))

(provide 'ob-bibtex)
#+END_SRC
   
** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
** Configs
*** General
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time
      org-use-tag-inheritance nil
      org-hide-leading-stars t
      org-startup-indented t)

; Create a custom ID on links so you can move them around and they still workf
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

(setq org-startup-with-inline-images "inlineimages")


#+END_SRC

*** Org Agenda
#+NAME: recursively-include-all-org-files 
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'org-agenda-mode-hook
    (lambda ()
        (setq org-agenda-files
            (find-lisp-find-files "~/org" "\.org$"))))
#+END_SRC

#+NAME: set-agenda-file
#+BEGIN_SRC emacs-lisp
(setq org-agenda-todo-ignore-with-date t)
(if (file-exists-p (expand-file-name "~/org/.agenda-files"))
    (setq org-agenda-files "~/org/.agenda-files" ))
#+END_SRC


#+NAME: org-agenda-custom-commands
#+BEGIN_SRC emacs-lisp
; First attempt at "research standup" still needs work
; ("R" 
; 					; descripition
;  "Research Standup" 
; 					; tags
;  ((tags (format "+RA&CLOSED>=\"<%s>\"" (org-read-date)))
;   (tags "+RA&CLOCKSUM={[:digit:]*:[:digit:]*}"))
; 					; settings
;  ((org-agenda-files '("~/org2/research.org"))
;   (org-agenda-compact-blocks t))
;  

; ensure that tags-todo do not show scheduled items
(setq org-agenda-tags-todo-honor-ignore-options t)

(setq org-agenda-custom-commands '(
				   ("n" "Agenda and TODO's"
				    ((agenda "")
				     (tags-todo "+urgent")
;				     (tags-todo "CATEGORY=\"RPAD705\"&-backburner&DEADLINE<\"<+1w>\"|CATEGORY=\"RPAD705\"&-backburner&SCHEDULED<\"<+1w>\"")
				     (tags-todo "CATEGORY=\"RPAD705\"&-backburner")
				     (tags-todo "CATEGORY=\"INF722\"-backburner")
				     (tags-todo "CATEGORY=\"INF711\"-backburner")
				     (tags-todo "CATEGORY=\"INF595\"-backburner")
				     (tags-todo "CATEGORY=\"RA\"-backburner")
				     (tags-todo "CATEGORY=\"INFPHD\"-backburner")
				     (tags-todo "CATEGORY=\"PP\"-backburner")
				     (tags-todo "CATEGORY=\"OJS\"-backburner")
				     (tags-todo "CATEGORY=\"Pub\"-backburner")
				     (tags "+backburner")
				     ))
				   ("P" "Process Improvements"
				     ((tags-todo "CATEGORY=\"Process\"-backburner")
				      (tags-todo "CATEGORY=\"Process\"+backburner")
				     ))
				    ))
#+END_SRC
**** TODO Fix "Research Standup" org-agenda-custom-command
:PROPERTIES:
:CATEGORY: Process
:END:
http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html
*** Org Capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/unfiled.org"))
(define-key global-map "\C-cr" 'org-capture)

(setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
(setq org-refile-use-outline-path 'file)
(setq org-refile-path-complete-in-steps t)
#+END_SRC
**** Capture Templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates 
'(("t" "Todo" entry (file+headline "~/org2/unfiled.org" "Tasks")
   "* TODO %?\n  %i\n  %a")
  ("m" "Migration" entry (file+headline "~/org2/unfiled.org" "Migration")
   "* MIGRATION %?\n %i\n %a ")
  ("q" "Question" entry (file+headline "~/org2/rpad705.org" "Questions")
   "* QUESTION %?\n %i\n %a ")
))

#+END_SRC
*** Org Export
#+BEGIN_SRC emacs-lisp
(setq org-export-odt-preferred-output-format "docx"
      org-export-odt-styles-file nil
      org-file-apps '((auto-mode . emacs)
                      ("\\.mm\\'" . default)
                      ("\\.x?html?\\'" . default)
                      ("\\.pdf\\'" . default)))

#+END_SRC

*** Org Babel
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
(setq org-confirm-babel-evaluate nil)

(add-to-list 'load-path "~/.emacs.d/lib/")

; Add advice to org-babel-python-evaluate to use ipython's %cpaste magic
(defadvice org-babel-python-evaluate (before org-babel-ipython-evaluate 
					     (session body &optional result-type result-params preamble) activate)
  (if session
      (setq body (concat "\n%cpaste\n" body "\n--\n"))))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (R . t)
   (latex . t)
   (sh . t )
   (bibtex . t)
   (sql . t)
   (ditaa .t)))

(org-babel-lob-ingest "~/.emacs.d/lib/org/doc/library-of-babel.org")

#+END_SRC

*** Org Publish
#+BEGIN_SRC emacs-lisp
     (setq org-publish-project-alist
           '(("org"
              :base-directory "~/org2/"
              :publishing-directory "/ssh:root@fearthecloud.net:/var/www/org/httpdocs/"
	            :publishing-function org-html-publish-to-html
	            :exclude "personal.org"
              :section-numbers nil
              :with-toc nil
              :html-head "")))

(defun org-latex-line-break (line-break contents info)
  "Transcode a LINE-BREAK object from Org to LaTeX.
CONTENTS is nil.  INFO is a plist holding contextual information."
  "\\\\\n")

#+END_SRC
**** Mathjax Options
#+BEGIN_SRC emacs-lisp
(setq org-html-mathjax-options
  '((path  "http://orgmode.org/mathjax/MathJax.js")
    (scale "100")
    (align "left")
    (indent "0em")
    (mathml nil)))

(setq org-html-mathjax-template
      "<script type=\"text/javascript\" src=\"%PATH\"></script>
<script type=\"text/javascript\">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        // Only one of the two following lines, depending on user settings
        // First allows browser-native MathML display, second forces HTML/CSS
        :MMLYES: config: [\"MMLorHTML.js\"], jax: [\"input/TeX\"],
        :MMLNO: jax: [\"input/TeX\", \"output/HTML-CSS\"],
        extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\",
                     \"TeX/noUndefined.js\"],
        tex2jax: {
            inlineMath: [ [\"\\\\(\",\"\\\\)\"], ['$$','$$'] ],
            displayMath: [ [\"\\\\[\",\"\\\\]\"], [\"\\\\begin{displaymath}\",\"\\\\end{displaymath}\"] ],
            skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\"],
            ignoreClass: \"tex2jax_ignore\",
            processEscapes: false,
            processEnvironments: true,
            preview: \"TeX\"
        },
        showProcessingMessages: true,
        displayAlign: \"%ALIGN\",
        displayIndent: \"%INDENT\",

        \"HTML-CSS\": {
             scale: %SCALE,
             availableFonts: [\"STIX\",\"TeX\"],
             preferredFont: \"TeX\",
             webFont: \"TeX\",
             imageFont: \"TeX\",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    \"MML\",
                 Firefox: \"MML\",
                 Opera:   \"HTML\",
                 other:   \"HTML\"
             }
        }
    });
/*]]>*///-->
</script>")
#+END_SRC

*** Org Bibtex
#+BEGIN_SRC emacs-lisp
(setq org-bibtex-autogen-keys t
      org-bibtex-prefix "BIB_"
      org-bibtex-export-arbitrary-fields t
      org-bibtex-type-property-name "type")

#+END_SRC
** Contrib
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/org/contrib/lisp/")
#+END_SRC
*** Org Mode Bullets                                            :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/org-bullets/")
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
*** Org Reveal                                                  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/org-reveal/")
(require 'ox-reveal)
(setq org-reveal-root "file:///home/kotfic/src/revealjs/"
      org-reveal-rolling-links nil)

(setq org-reveal-title-slide-template
 "<h2>%t</h2>
<h3>%a</h3>
<h3>%e</h3>
<h3>%d</h3>")

#+END_SRC
*** Org Bibex
#+BEGIN_SRC emacs-lisp

#+END_SRC
* IDO
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 'both) ; for buffers and files
(setq
 ido-save-directory-list-file "~/.emacs.d/cache/ido.last"
 ido-ignore-buffers '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace" "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")
 ido-work-directory-list '("~/" "~/Desktop" "~/Documents" "~src")
 ido-case-fold  t                 ; be case-insensitive
 ido-enable-last-directory-history t ; remember last used dirs
 ido-max-work-directory-list 30   ; should be enough
 ido-max-work-file-list      50   ; remember many
 ido-use-filename-at-point nil    ; don't use filename at point (annoying)
 ido-use-url-at-point nil         ; don't use url at point (annoying)
 ido-max-prospects 10             ; don't spam my minibuffer
 ido-confirm-unique-completion nil)

                                        ; when using ido, the confirmation is rather annoying...
(setq confirm-nonexistent-file-or-buffer nil)
(fset 'dired 'ido-dired)
#+END_SRC
** IDO Ubiquitous                                                :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/ido-ubiquitous/")
(require 'ido-ubiquitous)
(ido-ubiquitous-mode 1)

;; Fix ido-ubiquitous for newer packages
(defmacro ido-ubiquitous-use-new-completing-read (cmd package)
  `(eval-after-load ,package
     '(defadvice ,cmd (around ido-ubiquitous-new activate)
        (let ((ido-ubiquitous-enable-compatibility nil))
          ad-do-it))))


(ido-ubiquitous-disable-in org-insert-link)
(ido-ubiquitous-disable-in org-refile)

(ido-ubiquitous-use-new-completing-read geben-find-file 'geben)
;(ido-ubiquitous-use-new-completing-read webjump 'webjump)
;(ido-ubiquitous-use-new-completing-read yas/expand 'yasnippet)
;(ido-ubiquitous-use-new-completing-read yas/visit-snippet-file 'yasnippet)
#+END_SRC
* Comint Mode
#+BEGIN_SRC emacs-lisp
(defun clear-comint-buffer ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
#+END_SRC

* Java/Eclim Support                                             :DEPRECATED:

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'load-path "~/.emacs.d/lib/emacs-eclim")
(require 'eclim)
(global-eclim-mode)

(require 'eclimd)
#+END_SRC

* Uniqueify Buffer Names
#+BEGIN_SRC emacs-lisp

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "ssh")

#+END_SRC

* Browser support
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium")

#+END_SRC

* Magit                                                           :SUBMODULE:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/magit")
(require 'magit)

#+END_SRC

* Pandoc-Mode

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/pandoc")
(require 'pandoc-mode)

#+END_SRC
* S string library
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/s")
(require 's)

#+END_SRC

* LaTex
** AucTex
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/")
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)


(eval-after-load "tex"
  '(push '("pdflatex" "pdflatex %t" TeX-run-TeX nil t :help "Run pdflatex on file")
         TeX-command-list))

(eval-after-load "tex"
  '(push '("latexmk" "latexmk %t" TeX-run-TeX nil t :help "Run Latexmk on file")
         TeX-command-list))


(setq reftex-plug-into-AUCTeX t)
(setq reftex-bibliography-commands '("addbibresource" "bibliography"))
(setq reftex-cite-prompt-optional-args t)

(setq reftex-cite-format '((?t . "\\textcite[]{%l}")
                           (?a . "\\autocite[]{%l}")
                           (?A . "\\citeauthor[]{%l}")
                           (?c . "\\cite[]{%l}")
                           (?s . "\\smartcite[]{%l}")
                           (?f . "\\footcite[]{%l}")
                           (?n . "\\nocite{%l}")
                           (?b . "\\blockquote[]{%l}{}")))

(eval-after-load 'reftex-vars
  '(setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"))
(eval-after-load 'reftex
  '(progn
     (define-key reftex-mode-map (kbd "C-c -") nil)))

(add-hook 'LaTeX-mode-hook #'reftex-mode)

(add-hook 'LaTeX-mode-hook (if (locate-library "cdlatex")
                              'cdlatex-mode
                             'LaTeX-math-mode))
(setq TeX-auto-save t
      TeX-save-query nil
      TeX-parse-self t
      TeX-newline-function #'reindent-then-newline-and-indent)
(setq-default TeX-master 'dwim)


#+END_SRC
** RefTex
#+BEGIN_SRC emacs-lisp

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode

(setq reftex-plug-into-AUCTeX t)

#+END_SRC
** Bibtex
#+BEGIN_SRC emacs-lisp
(require 'bibtex)
(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name)
	   (file-exists-p (buffer-file-name))
	   (reftex-parse-all))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation))
; DISABLED - org-mode-reftex-setup throwing errors (to fix)
; (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_SRC
* Yasnippet                                                       :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/yasnippet")
(require 'yasnippet)

(setq yas-snippet-dirs '("~/.emacs.d/custom-snippets" "~/.emacs.d/lib/yasnippet/snippets"))


; This could probably be more sophisticated
(defun preview-fragment ()
  (if (looking-back "\) ")
      (org-preview-latex-fragment)))

(add-hook 'org-mode-hook
          (lambda ()
	    (yas-minor-mode-on)
	    (yas-reload-all)
	    (set (make-local-variable 'yas-after-exit-snippet-hook) '(preview-fragment))
	    ))

(setq yas-triggers-in-field t)

#+END_SRC

** Org-Mode Snippets
#+TBLNAME: snippets
| name        | key  | file | command                            |
|-------------+------+------+------------------------------------|
| Embed Latex | $$   | $$   | \\( $1 \\) $0                      |
| Sum         | \S   | S    | \sum\limits_{${1:i=N}}^{${2:N}}$0  |
| Simple Sum  | \Ss  | Ss   | \sum{$1}$0                         |
| Product     | \P   | P    | \prod\limits_{${1:i=n}}^{${2:n}}$0 |
| Fraction    | \f   | f    | \frac{$1}{$2} $0                   |
| alpha       | \a   | a    | \alpha_{$1}^{$2}$0                 |
| alpha hat   | \ah  | ah   | \hat{\alpha}_{$1}^{$2}$0           |
| alpha bar   | \ab  | ab   | \overline{\alpha}_{$1}^{$2}$0      |
| beta        | \b   | b    | \beta_{$1}^{$2}$0                  |
| beta hat    | \bh  | bh   | \hat{\beta}_{$1}^{$2}$0            |
| beta bar    | \bb  | bb   | \overline{\beta}_{$1}^{2}$0        |
| epsilon hat | \eh  | eh   | \hat{\epsilon}_{$1}^{$2}$0         |
| epsilon     | \e   | e    | \epsilon_{$1}^{$2}$0               |
| epsilon bar | \eb  | eb   | \overline{\epsilon}_{$1}^{$2}$0    |
| sigma       | \s   | s    | \sigma_{$1}^{$2}$0                 |
| sigma hat   | \sh  | sh   | \hat{\sigma}_{$1}^{$2}$0           |
| sigma bar   | \sb  | sb   | \overline{\sigma}_{$1}^{$2}$0      |
| y           | \y   | y    | y_{$1}^{$2}$0                      |
| y hat       | \yh  | yh   | \hat{y}_{$1}^{$2}$0                |
| y bar       | \yb  | yb   | \overline{y}_{$1}^{$2}$0           |
| Y           | \Y   | Y    | Y_{$1}^{$2}$0                      |
| Y hat       | \Yh  | Yh   | \hat{Y}_{$1}^{$2}$0                |
| Y bar       | \Yb  | Yb   | \overline{Y}_{$1}^{$2}$0           |
| x           | \x   | x    | x_{$1}^{$2}$0                      |
| x hat       | \xh  | xh   | \hat{x}_{$1}^{$2}$0                |
| x bar       | \xb  | xb   | \overline{x}_{$1}^{$2}$0           |
| X           | \X   | X    | X_{$1}^{$2}$0                      |
| X hat       | \Xh  | Xh   | \hat{X}_{$1}^{$2}$0                |
| X bar       | \Xb  | Xb   | \overline{X}_{$1}^{$2}$0           |
| p           | \p   | p    | p_{$1}^{$2}$0                      |
| p hat       | \ph  | ph   | \hat{p}_{$1}^{$2}$0                |
| p bar       | \pb  | pb   | \overline{p}_{$1}^{$2}$0           |
| hat         | \hat | hat  | \hat{$1}_{$2}^{$3}$0               |
| bar         | \bar | bar  | \overline{$1}_{$2}^{$3}$0          |
| rho         | \r   | r    | \rho_{$1}^{$2}$0                   |
| rho hat     | \rh  | rh   | \hat{\rho}_{$1}^{$2}$0             |
| rho bar     | \rb  | rb   | \overline{rho}_{$1}^{$2}$0         |


#+NAME: export-snippet-table  
#+BEGIN_SRC emacs-lisp :results silent :var snippets=snippets

(require 's)

(defvar org-mode-snippet-template "\
# -*- mode: snippet -*-
# name: $0
# key: $1
# --
$3")

(defvar snippet-basedir "~/.emacs.d/custom-snippets/org-mode/")

(defun save-snippet (snip)
  (let ((file_path (concat snippet-basedir (nth 2 snip)))
	(contents (s-format org-mode-snippet-template 'elt snip)))
    
    (with-temp-file file_path
      (insert contents))
   
    ))

(mapcar #'save-snippet (cdr (cdr snippets)))
(yas-reload-all)
(message "Snippet export complete")
#+END_SRC
*** DONE Move existing latex/org-mode snippets into table
CLOSED: [2013-09-06 Fri 11:51]
:PROPERTIES:
:CATEGORY: Process
:END:
* DocView
#+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.docx\\'" . doc-view-mode))
(add-to-list 'auto-mode-alist '("\\.odt\\'" . doc-view-mode))
(setq doc-view-continuous t)


#+END_SRC
* Refmanager Mode
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/refmanager")
(require 'refmanager-mode)

#+END_SRC
** DONE fix refmanager-bibtex-to-org to also create bibtex src block
CLOSED: [2013-10-14 Mon 13:15]
** DONE Figure out custom bibtex tangle based on prop match
CLOSED: [2013-10-14 Mon 17:23]
CLOCK: [2013-10-14 Mon 13:15]--[2013-10-14 Mon 17:23] =>  4:08
* Lorem Ipsum

* Twittering Mode                                                 :SUBMODULE:
  :PROPERTIES:
  :LAST-UPDATED: [2013-04-12 Fri]
  :VERSION: master
  :END:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/twittering-mode")
(require 'twittering-mode)

(setq twittering-use-master-password t)

(setq twittering-cert-file "/etc/ssl/certs/ca-certificates.crt")
#+END_SRC

** TODO Review Twittering Mode Version
SCHEDULED: <2013-11-07 Thu +1m>
- State "DONE"       from "TODO"       [2013-10-15 Tue 07:43]
- State "DONE"       from "TODO"       [2013-10-10 Thu 09:25]
- State "DONE"       from "TODO"       [2013-08-26 Mon 20:03]
- State "DONE"       from "TODO"       [2013-08-07 Wed 13:44]
- State "DONE"       from "TODO"       [2013-07-15 Mon 12:09]
:PROPERTIES:
:LAST_REPEAT: [2013-10-15 Tue 07:43]
:END:

* Lorem Ipsum

#+BEGIN_SRC emacs-lisp

#+END_SRC
* Python
** General                                                      :DEPRECATED:
+ Depricating this,  elpy-use-ipython calls this

#+BEGIN_SRC emacs-lisp :tangle no
(setq
 python-shell-interpreter "ipython"
 python-shell-interpreter-args ""
 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
 python-shell-completion-setup-code   "from IPython.core.completerlib import module_completion"
 python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
 python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"
)
#+END_SRC

** Elpy
   + Note,  this is an ELPA install I believe,  should we look at moving
     this into a fully compiled/updated submodule?
#+BEGIN_SRC emacs-lisp
(require 'elpy)

(elpy-enable)
(elpy-use-ipython)
#+END_SRC
** Virtualenv
#+BEGIN_SRC emacs-lisp :tangle no

(add-to-list 'load-path "~/.emacs.d/lib/virtualenv/")
(require 'virtualenv)

#+END_SRC
** Emacs-IPython-Notebook                                        :DEPRECATED:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'load-path "~/.emacs.d/lib/ein")
(add-to-list 'load-path "~/.emacs.d/lib/ein/lisp")
(require 'ein)
#+END_SRC
* Mu4e                                                            :SUBMODULE:
:PROPERTIES:
:LAST-UPDATED: [2013-05-30 Thr]
:VERSION: master
:END:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/mu4e/mu4e")

(require 'mu4e)
(require 'org-mu4e)


(defun mu4e-msgv-action-view-in-browser (msg)
  "View the body of the message in a web browser."
  (interactive)
  (let ((html (mu4e-msg-field (mu4e-message-at-point t) :body-html))
	(tmpfile (format "%s/%d.html" temporary-file-directory (random))))
    (unless html (error "No html part for this message"))
    (with-temp-file tmpfile
      (insert
       "<html>"
       "<head><meta http-equiv=\"content-type\""
       "content=\"text/html;charset=UTF-8\">"
       html))
        (browse-url (concat "file://" tmpfile))))

(add-to-list 'mu4e-view-actions
	     '("View in browser" . mu4e-msgv-action-view-in-browser) t)

;(setq send-mail-function 'smtpmail-send-it)
(setq message-send-mail-function 'message-send-mail-with-msmtp)
(setq sendmail-program "/usr/bin/msmtp")

;;need to tell msmtp which account we're using
; (setq message-sendmail-extra-arguments '("-a" "anderson"))
;; you might want to set the following too
; (setq mail-host-address "gmail.com")
; (setq user-full-name "Anderson Guy")
; (setq user-mail-address "sivaram.notthere@gmail.com")


; do not enable fill-column on message compose
(setq message-fill-column nil)

(setq mu4e-mu-binary "/usr/local/bin/mu")

; fix weird html2text is out of range error 'error in process filter: Args out of range: "Email\"", 7, 6'
; see: https://github.com/djcb/mu/issues/73
(setq mu4e-html2text-command "html2text -nobs -width 72")
(setq mu4e-view-prefer-html t)              ;; prefer html
(setq mu4e-msg2pdf "~/.emacs.d/lib/mu4e/toys/msg2pdf/msg2pdf")

(setq
 mu4e-use-fancy-chars t
 mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
 mu4e-update-interval 900)              ;; update every 3 minutes

(setq smtpmail-queue-mail  nil  ;; start in non-queuing mode
      smtpmail-queue-dir   "~/mail/queue/cur")


(defun gmail ()
  (interactive)
  (setq
   mu4e-sent-folder   "/gmail/[Gmail].Sent"       ;; folder for sent messages
   mu4e-drafts-folder "/gmail/[Gmail].Drafts"     ;; unfinished messages
   mu4e-trash-folder  "/gmail/[Gmail].Trash"      ;; trashed messages
   mu4e-refile-folder "/gmail/[Gmail].Archives"   ;; saved messages
   ))


(defun ualbany ()
  (interactive)
  (setq
   mu4e-sent-folder   "/ualbany/Sent Items"       ;; folder for sent messages
   mu4e-drafts-folder "/ualbany/Drafts"     ;; unfinished messages
   mu4e-trash-folder  "/ualbany/Trash"      ;; trashed messages
   message-sendmail-extra-arguments '("-a" "ualbany" "-X" "/home/kotfic/.msmtp.log" "-t")
   mail-host-address "albany.edu"
   user-full-name "Christopher Kotfila"
   user-mail-address "ckotfila@albany.edu"
   mu4e-refile-folder
   (lambda (msg)
          (cond
           ;; messages to the mu mailing list go to the /mu folder
           ((or (mu4e-message-contact-field-matches msg :to "PROJPETITION@listserv.albany.edu")
		(mu4e-message-contact-field-matches msg :from "PROJPETITION@listserv.albany.edu")
		(mu4e-message-contact-field-matches msg :cc "PROJPETITION@listserv.albany.edu"))
            "/ualbany/ProjectPetition")
           ((or (mu4e-message-contact-field-matches msg :to "@listserv.albany.edu")
		(mu4e-message-contact-field-matches msg :from "@listserv.albany.edu")
		(mu4e-message-contact-field-matches msg :cc "@listserv.albany.edu"))
            "/ualbany/IST-L")           
	   ((or (mu4e-message-contact-field-matches msg :to "@csail.mit.edu")
		(mu4e-message-contact-field-matches msg :from "@csail.mit.edu")
		(mu4e-message-contact-field-matches msg :cc "@csail.mit.edu"))
					 "/ualbany/CSAIL")
	    ((or (mu4e-message-contact-field-matches msg :to "@LIST.NIH.GOV")
		 (mu4e-message-contact-field-matches msg :from "@LIST.NIH.GOV")
		 (mu4e-message-contact-field-matches msg :cc "@LIST.NIH.GOV"))
	     "/ualbany/UMLSUSERS-L")
	    ;; everything else goes to /archive
	    ;; important to have a catch-all at the end!
	    (t "/ualbany/Archives")))
   ))

(defun ftc ()
  (interactive)
  (setq 
   mu4e-sent-folder "/ftc/Sent Items"
   mu4e-drafts-folder "/ftc/Drafts"
   mu4e-trash-folder "/ftc/Trash"
   user-mail-address "chris@fearthecloud.net"
   smtpmail-smtp-user "chris@fearthecloud.net"
   smtpmail-smtp-server "fearthecloud.net"))



(setq mu4e-maildir-shortcuts
      '( ("/ualbany/INBOX"     . ?a)
         ("/gmail/INBOX"     . ?g)
         ("/ftc/INBOX"     . ?f)))

      ;; these are actually the defaults
(setq
 mu4e-maildir       "~/mail"   ;; top-level Maildir
; mu4e-sent-folder   "/sent"       ;; folder for sent messages
; mu4e-drafts-folder "/drafts"     ;; unfinished messages
; mu4e-trash-folder  "/trash"      ;; trashed messages
; mu4e-refile-folder "/archive"   ;; saved messages
)


;; stuff from the internet,  yay!

(setq mu4e-account-alist
        '(("gmail"
	   (mu4e-sent-folder "/gmail/[Gmail].Sent")
	   (mu4e-drafts-folder "/gmail/[Gmail].Draft")
	   (mu4e-trash-folder "/gmail/[Gmail].Trash")
	   (user-mail-address "kotfic@gmail.com")
	   (smtpmail-smtp-user "kotfic@gmail.com")
	   (smtpmail-smtp-server "smtp.gmail.com")
	   (mu4e-sent-messages-behavior delete)
	   ;; add other variables here
	   )
	  ("ualbany"
	   (mu4e-sent-folder "/ualbany/Sent Items")
	   (mu4e-drafts-folder "/ualbany/Drafts")
	   (mu4e-trash-folder "/ualbany/Trash")
	   (user-mail-address "ckotfila@albany.edu")
	   (smtpmail-smtp-user "ckotfila@albany.edu")
	   (smtpmail-local-domain "pod51009.outlook.com")
	   (smtpmail-smtp-server "pod51009.outlook.com")

	   ;; add other variables here
         )
	  ("ftc"
	   (mu4e-sent-folder "/ftc/Sent Items")
	   (mu4e-drafts-folder "/ftc/Drafts")
	   (mu4e-trash-folder "/ftc/Trash")
	   (user-mail-address "chris@fearthecloud.net")
	   (smtpmail-smtp-user "chris@fearthecloud.net")
;          (smtpmail-local-domain "pod51009.outlook.com")
	   (smtpmail-smtp-server "fearthecloud.net")
	   ;; add other variables here
         )))



(defun mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-msg-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var)) mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) mu4e-account-alist)
                             nil t nil nil (caar mu4e-account-alist))))
         (account-vars (cdr (assoc account mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars))))

(add-hook 'mu4e-compose-pre-hook 'mu4e-set-account)

#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun message-send-mail-with-msmtp ()
  "Send off the prepared buffer with msmtp."
  (require 'sendmail)
  (let ((errbuf (if message-interactive
		    (message-generate-new-buffer-clone-locals
		     " sendmail errors")
		  0))
	resend-to-addresses delimline)
    (unwind-protect
	(progn
	  (let ((case-fold-search t))
	    (save-restriction
	      (message-narrow-to-headers)
	      (setq resend-to-addresses (message-fetch-field "resent-to")))
	    ;; Change header-delimiter to be what sendmail expects.
	    (goto-char (point-min))
	    (re-search-forward
	     (concat "^" (regexp-quote mail-header-separator) "\n"))
	    (replace-match "\n")
	    (backward-char 1)
	    (setq delimline (point-marker))
	    (run-hooks 'message-send-mail-hook)
	    ;; Insert an extra newline if we need it to work around
	    ;; Sun's bug that swallows newlines.
	    (goto-char (1+ delimline))
	    (when (eval message-mailer-swallows-blank-line)
	      (newline))
	    (when message-interactive
	      (with-current-buffer errbuf
		(erase-buffer))))
	  (let* ((default-directory "/")
		 (coding-system-for-write message-send-coding-system)
		 (cpr (apply
		       'call-process-region
		       (append
			(list (point-min) (point-max) sendmail-program
			      nil errbuf nil )
			message-sendmail-extra-arguments
			
			(list "-t")

		;	(if (listp (assoc 'message-recipients message-options))
		;	    (car (cdr (assoc 'message-recipients message-options)))
		;	  (list (car (cdr (assoc 'message-recipients message-options)))))
			)
		       )))
	    (unless (or (null cpr) (and (numberp cpr) (zerop cpr)))
              (if errbuf (pop-to-buffer errbuf))
	      (error "Sending...failed with exit value %d" cpr)))
	  (when message-interactive
	    (with-current-buffer errbuf
	      (goto-char (point-min))
	      (while (re-search-forward "\n+ *" nil t)
		(replace-match "; "))
	      (if (not (zerop (buffer-size)))
		  (error "Sending...failed to %s"
			 (buffer-string))))))
;      (when (bufferp errbuf)
;	(kill-buffer errbuf))
)))


#+END_SRC
* GNUS
:PROPERTIES:
:ID:       a4c7d2fc-5953-4449-831e-991dc4197705
:END:
  It begins...
#+BEGIN_SRC emacs-lisp
(require 'gnus)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.gnus.el
(setq user-mail-address "kotfic@gmail.com")
(setq user-full-name "Christopher Kotfila")

(setq gnus-select-method '(nntp "news.gmane.org"))
(setq gnus-secondary-select-method '((nntp "news.gwene.org")))

(setq gnus-save-newsrc-file nil)

; set all groups permanently visible
(setq gnus-permanently-visible-groups ".*")

#+END_SRC

* PHP								  :SUBMODULE:
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/php/")
(autoload 'php-mode "php-mode" "Major mode for PHP." t)
(add-to-list 'auto-mode-alist '("\\.\\(php\\|phtml\\)\\'" . php-mode))


#+END_SRC
* Geben
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/geben-0.26/")
(autoload 'geben "geben" "PHP Debugger on Emacs" t)

(defun geben-safely-end-proxy()
  "Tries to call `dbgp-proxy-unregister', but silently
   returns `nil' if it throws an error."
  (interactive)
  (condition-case nil
      (dbgp-proxy-unregister "chris_cc")
    (error nil)))

(defun geben-single-or-proxy()
  "Tries calling geben, if it throws an error because it needs to use
   `geben-proxy', it tries that.
   TODO: make it toggle.."
  (interactive)
  (condition-case nil
      (geben)
    (error (geben-proxy "127.0.0.1" 9001 "chris_cc"))))

(defadvice geben-display-context(before clear-windows-for-vars activate)
  (delete-other-windows))

(add-hook 'kill-emacs-hook 'geben-safely-end-proxy)

#+END_SRC
* LISP/SLIME 
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/slime/")
(require 'slime)

(slime-setup '(slime-fancy))
(setq inferior-lisp-program (executable-find "sbcl"))

;(load (expand-file-name "~/quicklisp/slime-helper.el"))

(if (file-exists-p (expand-file-name "~/lib/slime-helper.el"))
    (load (expand-file-name "~/lib/slime-helper.el")))


#+END_SRC

* Emacs Speaks Statistics					  :SUBMODULE:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/ESS/lisp/")
(require 'ess-site)
#+END_SRC
* Jabber 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/jabber/")
(require 'jabber)

(setq jabber-account-list '(("kotfic@gmail.com"
			     (:network-server . "talk.google.com")
			     (:port . 5222)
			     (:connection-type . starttls)
			     )
			    ("170_26772@chat.hipchat.com"
			     (:network-server . "chat.hipchat.com" )
			     (:port . 5222)
			     (:connection-type . starttls)
			    )))

(defun jabber-google-groupchat-create ()
  (interactive)
  (let ((group (apply 'format "private-chat-%x%x%x%x%x%x%x%x-%x%x%x%x-%x%x%x%x-%x%x%x%x-%x%x%x%x%x%x%x%x%x%x%x%x@groupchat.google.com"
		      (mapcar (lambda (x) (random x)) (make-list 32 15))))
	(account (jabber-read-account)))
    (jabber-groupchat-join account group (jabber-muc-read-my-nickname account group) t)))

#+END_SRC

** Hipchat
#+BEGIN_SRC emacs-lisp
(defun join-dev ()
  (interactive)
  (jabber-muc-join "170_26772@chat.hipchat.com" "170_dev@conf.hipchat.com" "Christopher Kotfila"))


#+END_SRC
* Github & Gists
** Dependencies
*** logito 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/logito/")
(require 'logito)
#+END_SRC

*** pcache 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/pcache/")
(require 'pcache)

#+END_SRC

** Github 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/gh/")
(require 'gh)
#+END_SRC
** Gist								  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/gist/")
(require 'gist)
#+END_SRC

* Guide Key
** Dependencies
*** Popwin                                                      :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/popwin")
(require 'popwin)
#+END_SRC
** Code                                                          :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/guide-key")
(require 'guide-key)

; Rectangles
; (setq guide-key/guide-key-sequence '("C-x r" "C-x 4"))

(guide-key-mode 1)
#+END_SRC
*** Gnus 
#+BEGIN_SRC emacs-lisp
(defun guide-key/hook-function-for-guns ()
  (guide-key/add-local-guide-key-sequence "T")
  (guide-key/add-local-guide-key-sequence "A")
  (guide-key/add-local-guide-key-sequence "G")
  (guide-key/add-local-guide-key-sequence "S")
  (guide-key/add-local-guide-key-sequence "M")
  (guide-key/add-local-guide-key-sequence "J")
  (guide-key/add-local-guide-key-sequence "K")
  (guide-key/add-local-guide-key-sequence "W"))

; (add-hook 'gnus-group-mode-hook 'guide-key/hook-function-for-gnus)

#+END_SRC
*** Org-mode 
#+BEGIN_SRC emacs-lisp :tangle no
(defun guide-key/my-hook-function-for-org-mode ()
  (guide-key/add-local-guide-key-sequence "C-c")
  (guide-key/add-local-guide-key-sequence "C-c C-x")
  (guide-key/add-local-highlight-command-regexp "org-"))
(add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)
#+END_SRC

* Emacs Multi-Media System                                        :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/emms/lisp/")
(require 'emms-setup)
(emms-all)
(add-to-list 'emms-player-mplayer-parameters "-novideo")
(emms-default-players)

(setq emms-source-playlist-default-format 'm3u)
(setq emms-source-file-default-directory "~/music/")

(defun dubstep-go ()
  (interactive)  
  (emms-add-playlist "~/music/dubstep.m3u")
  (emms-shuffle)
  (emms-start)
  (emms-show))

(global-set-key (kbd "s-<f10>") 'emms-previous)
(global-set-key (kbd "s-<f11>") 'emms-pause)
(global-set-key (kbd "s-<f12>") 'emms-next)

#+END_SRC
* Metamap Mode                                                    :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/metamap/")
(require 'metamap-mode)

(setq metamap-cli-arguments '("--XMLf" "--restrict_to_sts patf,dsyn,mobd,comd,cgab,acab,inpo,anab,neop,virs,bact,sosy,topp,medd,strd,phsu,bodm,antb,clnd,drdd,lbpr,lbtr,diap" ))
#+END_SRC
** DONE add documentation help for tags from 2012 output explained
CLOSED: [2013-09-03 Tue 10:51]
http://metamap.nlm.nih.gov/MM12_XML_Info.shtml

* MySQL
#+BEGIN_SRC emacs-lisp 
(add-hook 'sql-mode-hook
	  (lambda () (sql-highlight-mysql-keywords)))
#+END_SRC
