#+TAGS: EXPERIMENTAL(e) DEPRECATED(d) SUBMODULE(s)
#+EXCLUDE_TAGS: DEPRECATED
* Open [1/7]
  + [ ] Can we move ~/.gnus into this file and tangle it out to .gnus on load?
  + [ ] For long Variable initializations can we keep an org-table somewhere and just noweb it in?
  + [ ] Review [[*Org%20Capture][Org Capture]] functionality
  + [ ] Is [[*Org%20Export][Org Export]] functionality still valid given 8.0.3?
  + [ ] Is the Python [[*General][General]] section still nessisary?
  + [ ] Is [[*Virtualenv][Virtualenv]] section relevant given inclusion of elpy library?
  + [ ] Need to revisit [[*IDO][IDO]] configs and see if we can cook up something better
  + [X] Make theme only load if we are in XEmacs

* TODO Install Skewer
  github: https://github.com/skeeto/skewer-mode

* TODO Add IDO ubiquitous
* Initialization
** Header
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Generated from emacs.org
;;;;
;;;;  do not edit this file!
;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
** Default Settings
*** General
n#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(show-paren-mode t)
(column-number-mode t)
(global-auto-revert-mode t)
(setq indent-tabs-mode nil)
(put 'downcase-region 'disabled nil)
#+END_SRC
*** Autosave
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
** XEmacs related
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode)
    (menu-bar-mode 0))

(if (fboundp 'tool-bar-mode)
    (tool-bar-mode 0) )

(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode 0))

#+END_SRC

*** X Fullscreen functionality                                   :DEPRECATED:
    :PROPERTIES:
    :tangle:   no
    :END:

    Note: Not needed with tiling windows managers

#+NAME: x-fullscreen-funcionality
#+BEGIN_SRC emacs-lisp
(if (fboundp 'x-send-client-message)
    (defun fullscreen ()
      (interactive)
      (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                             '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

  (global-set-key [f11] 'fullscreen)
  (global-set-key [XF86Save] 'fullscreen))

(if (and (eq window-system 'X)
         (fboundp 'fullscreen))
    (fullscreen))

#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

(add-to-list 'default-frame-alist '(alpha  . 85))

#+END_SRC

** ELPA Package Support
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
(require 'package)
(package-initialize)

#+END_SRC

** Winner Mode
#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode 1))
#+END_SRC

* Theme
  Only load themes if we have the color depth to support it
  ie.  Only load theme if we're running xemacs

#+BEGIN_SRC emacs-lisp
(when (> (display-color-cells) 256)
       (load-theme 'wombat t))
#+END_SRC
  
* Org Mode                                                        :SUBMODULE:
  :PROPERTIES:
  :LAST-UPDATED: [2013-06-05 Wed]
  :VERSION: 8.0.3
  :END:
** Review Org Mode Version
   SCHEDULED: <2013-06-05 Wed +1m>


** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
** Configs
*** General
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time
      org-use-tag-inheritance nil
      org-hide-leading-stars t
      org-startup-indented t)

#+END_SRC

*** Org Agenda
#+NAME recursively-include-all-org-files 
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'org-agenda-mode-hook
    (lambda ()
        (setq org-agenda-files
            (find-lisp-find-files "~/org" "\.org$"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-todo-ignore-with-date t)
(if (file-exists-p (expand-file-name "~/org/.agenda-files"))
    (setq org-agenda-files "~/org/.agenda-files" ))
#+END_SRC

*** Org Capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/unfiled.org"))
(define-key global-map "\C-cr" 'org-capture)


(setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
(setq org-refile-use-outline-path 'file)
(setq org-refile-path-complete-in-steps t)
#+END_SRC

*** Org Babel
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (R . t)
   (latex . t)
   (sh . t )))

#+END_SRC

*** Org Export
#+BEGIN_SRC emacs-lisp
(setq org-export-odt-preferred-output-format "docx"
      org-export-odt-styles-file nil
      org-file-apps '((auto-mode . emacs)
                      ("\\.mm\\'" . default)
                      ("\\.x?html?\\'" . default)
                      ("\\.pdf\\'" . default)))

#+END_SRC


* IDO
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 'both) ; for buffers and files
(setq
 ido-save-directory-list-file "~/.emacs.d/cache/ido.last"
 ido-ignore-buffers '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace" "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")
 ido-work-directory-list '("~/" "~/Desktop" "~/Documents" "~src")
 ido-case-fold  t                 ; be case-insensitive
 ido-enable-last-directory-history t ; remember last used dirs
 ido-max-work-directory-list 30   ; should be enough
 ido-max-work-file-list      50   ; remember many
 ido-use-filename-at-point nil    ; don't use filename at point (annoying)
 ido-use-url-at-point nil         ; don't use url at point (annoying)
 ido-max-prospects 10             ; don't spam my minibuffer
 ido-confirm-unique-completion nil)

                                        ; when using ido, the confirmation is rather annoying...
(setq confirm-nonexistent-file-or-buffer nil)

#+END_SRC

* Comint Mode
#+BEGIN_SRC emacs-lisp
(defun clear-comint-buffer ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
#+END_SRC

* Java/Eclim Support                                             :DEPRECATED:

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'load-path "~/.emacs.d/lib/emacs-eclim")
(require 'eclim)
(global-eclim-mode)

(require 'eclimd)
#+END_SRC

* Uniqueify Buffer Names
#+BEGIN_SRC emacs-lisp

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "ssh")

#+END_SRC

* Browser support
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium")

#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/magit")
(require 'magit)

#+END_SRC

* Pandoc-Mode

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/pandoc")
(require 'pandoc-mode)

#+END_SRC
* S string library
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/s")
(require 's)

#+END_SRC

* LaTex
** AucTex
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/")
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)


(eval-after-load "tex"
  '(push '("pdflatex" "pdflatex %t" TeX-run-TeX nil t :help "Run pdflatex on file")
         TeX-command-list))

(eval-after-load "tex"
  '(push '("latexmk" "latexmk %t" TeX-run-TeX nil t :help "Run Latexmk on file")
         TeX-command-list))


(setq reftex-plug-into-AUCTeX t)
(setq reftex-bibliography-commands '("addbibresource" "bibliography"))
(setq reftex-cite-prompt-optional-args t)

(setq reftex-cite-format '((?t . "\\textcite[]{%l}")
                           (?a . "\\autocite[]{%l}")
                           (?A . "\\citeauthor[]{%l}")
                           (?c . "\\cite[]{%l}")
                           (?s . "\\smartcite[]{%l}")
                           (?f . "\\footcite[]{%l}")
                           (?n . "\\nocite{%l}")
                           (?b . "\\blockquote[]{%l}{}")))

(eval-after-load 'reftex-vars
  '(setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"))
(eval-after-load 'reftex
  '(progn
     (define-key reftex-mode-map (kbd "C-c -") nil)))

(add-hook 'LaTeX-mode-hook #'reftex-mode)

(add-hook 'LaTeX-mode-hook (if (locate-library "cdlatex")
                              'cdlatex-mode
                             'LaTeX-math-mode))
(setq TeX-auto-save t
      TeX-save-query nil
      TeX-parse-self t
      TeX-newline-function #'reindent-then-newline-and-indent)
(setq-default TeX-master 'dwim)


#+END_SRC
** RefTex
#+BEGIN_SRC emacs-lisp

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode

(setq reftex-plug-into-AUCTeX t)

#+END_SRC
** Bibtex
#+BEGIN_SRC emacs-lisp

(require 'bibtex)

#+END_SRC
* DocView
#+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.docx\\'" . doc-view-mode))
(add-to-list 'auto-mode-alist '("\\.odt\\'" . doc-view-mode))
(setq doc-view-continuous t)


#+END_SRC
* Refmanager Mode
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/refmanager")
(require 'refmanager-mode)

#+END_SRC
* Lorem Ipsum
* Twittering Mode                                                 :SUBMODULE:
  :PROPERTIES:
  :LAST-UPDATED: [2013-04-12 Fri]
  :VERSION: master
  :END:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/twittering-mode")
(require 'twittering-mode)

(setq twittering-use-master-password t)
#+END_SRC

** Review Twittering Mode Version
   SCHEDULED: <2013-06-07 Fri +1m>

* Lorem Ipsum

#+BEGIN_SRC emacs-lisp

#+END_SRC
* Python
** General
   + Is this still nessisary?

#+BEGIN_SRC emacs-lisp
(setq
 python-shell-interpreter "ipython"
 python-shell-interpreter-args ""
 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
 python-shell-completion-setup-code   "from IPython.core.completerlib import module_completion"
 python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
 python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"
)
#+END_SRC

** Elpy								 :DEPRECATED:
   + Note,  this is an ELPA install I believe,  should we look at moving
     this into a fully compiled/updated submodule?
#+BEGIN_SRC emacs-lisp :tangle no
(elpy-enable)
(elpy-use-ipython)
#+END_SRC
** Virtualenv
#+BEGIN_SRC emacs-lisp :tangle no

(add-to-list 'load-path "~/.emacs.d/lib/virtualenv/")
(require 'virtualenv)

#+END_SRC
** Emacs-IPython-Notebook                                        :DEPRECATED:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'load-path "~/.emacs.d/lib/ein")
(add-to-list 'load-path "~/.emacs.d/lib/ein/lisp")
(require 'ein)
#+END_SRC
* Mu4e                                                            :SUBMODULE:
:PROPERTIES:
:LAST-UPDATED: [2013-05-30 Thr]
:VERSION: master
:END:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/mu4e/mu4e")

(require 'mu4e)
(require 'org-mu4e)

(setq send-mail-function 'smtpmail-send-it)

(setq mu4e-mu-binary "/usr/local/bin/mu")

; fix weird html2text is out of range error 'error in process filter: Args out of range: "Email\"", 7, 6'
; see: https://github.com/djcb/mu/issues/73
(setq mu4e-html2text-command "html2text -nobs -width 72")
(setq mu4e-view-prefer-html t)              ;; prefer html
(setq mu4e-msg2pdf "~/.emacs.d/lib/mu4e/toys/msg2pdf/msg2pdf")

(setq
 mu4e-use-fancy-chars t
 mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
 mu4e-update-interval 180)              ;; update every 3 minutes

(setq smtpmail-queue-mail  nil  ;; start in non-queuing mode
      smtpmail-queue-dir   "~/mail/queue/cur")


(defun gmail ()
  (interactive)
  (setq
   mu4e-sent-folder   "/gmail/[Gmail].Sent"       ;; folder for sent messages
   mu4e-drafts-folder "/gmail/[Gmail].Drafts"     ;; unfinished messages
   mu4e-trash-folder  "/gmail/[Gmail].Trash"      ;; trashed messages
   mu4e-refile-folder "/gmail/[Gmail].Archives"   ;; saved messages
   ))


(defun ualbany ()
  (interactive)
  (setq
   mu4e-sent-folder   "/ualbany/Sent"       ;; folder for sent messages
   mu4e-drafts-folder "/ualbany/Drafts"     ;; unfinished messages
   mu4e-trash-folder  "/ualbany/Trash"      ;; trashed messages
   )

  (setq mu4e-refile-folder
        (lambda (msg)
          (cond
           ;; messages to the mu mailing list go to the /mu folder
           ((or (mu4e-message-contact-field-matches msg :to "@listserv.albany.edu")
	       (mu4e-message-contact-field-matches msg :from "@listserv.albany.edu")
	       (mu4e-message-contact-field-matches msg :cc "@listserv.albany.edu"))
            "/ualbany/IST-L")
           ((or (mu4e-message-contact-field-matches msg :to "@csail.mit.edu")
	       (mu4e-message-contact-field-matches msg :from "@csail.mit.edu")
	       (mu4e-message-contact-field-matches msg :cc "@csail.mit.edu"))
            "/ualbany/CSAIL")
           ((or (mu4e-message-contact-field-matches msg :to "@LIST.NIH.GOV")
		(mu4e-message-contact-field-matches msg :from "@LIST.NIH.GOV")
		(mu4e-message-contact-field-matches msg :cc "@LIST.NIH.GOV"))
            "/ualbany/UMLSUSERS-L")
           ;; everything else goes to /archive
           ;; important to have a catch-all at the end!
           (t "/ualbany/Archives")))) )


(setq mu4e-maildir-shortcuts
      '( ("/ualbany/INBOX"     . ?a)
         ("/gmail/INBOX"     . ?g)) )

      ;; these are actually the defaults
(setq
 mu4e-maildir       "~/mail"   ;; top-level Maildir
; mu4e-sent-folder   "/sent"       ;; folder for sent messages
; mu4e-drafts-folder "/drafts"     ;; unfinished messages
; mu4e-trash-folder  "/trash"      ;; trashed messages
; mu4e-refile-folder "/archive"   ;; saved messages
)


;; stuff from the internet,  yay!

(setq mu4e-account-alist
        '(("gmail"
	   (mu4e-sent-folder "/gmail/[Gmail].Sent")
	   (mu4e-drafts-folder "/gmail/[Gmail].Draft")
	   (mu4e-trash-folder "/gmail/[Gmail].Trash")
	   (user-mail-address "kotfic@gmail.com")
	   (smtpmail-smtp-user "kotfic@gmail.com")
	   (smtpmail-smtp-server "smtp.gmail.com")
	   (mu4e-sent-messages-behavior delete)
	   ;; add other variables here
	   )
	  ("ualbany"
	   (mu4e-sent-folder "/ualbany/Sent Items")
	   (mu4e-drafts-folder "/ualbany/Drafts")
	   (mu4e-trash-folder "/ualbany/Trash")
	   (user-mail-address "ckotfila@albany.edu")
	   (smtpmail-smtp-user "ckotfila@albany.edu")
;          (smtpmail-local-domain "pod51009.outlook.com")
	   (smtpmail-smtp-server "pod51009.outlook.com")
	   ;; add other variables here
         )))

(defun mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-msg-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var)) mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) mu4e-account-alist)
                             nil t nil nil (caar mu4e-account-alist))))
         (account-vars (cdr (assoc account mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars))))

(add-hook 'mu4e-compose-pre-hook 'mu4e-set-account)

#+END_SRC
* GNUS
  It begins...
#+BEGIN_SRC emacs-lisp
(require 'gnus)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.gnus.el
(setq user-mail-address "kotfic@gmail.com")
(setq user-full-name "Christopher Kotfila")

(setq gnus-select-method '(nntp "news.gmane.org"))
(setq gnus-secondary-select-method '((nntp "news.gwene.org")))

(setq gnus-save-newsrc-file nil)

#+END_SRC

* PHP								  :SUBMODULE:
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/php/")
(autoload 'php-mode "php-mode" "Major mode for PHP." t)
(add-to-list 'auto-mode-alist '("\\.\\(php\\|phtml\\)\\'" . php-mode))


#+END_SRC
* Geben
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/geben-0.26/")
(autoload 'geben "geben" "PHP Debugger on Emacs" t)

(defun geben-safely-end-proxy()
  "Tries to call `dbgp-proxy-unregister', but silently
   returns `nil' if it throws an error."
  (interactive)
  (condition-case nil
      (dbgp-proxy-unregister "chris_cc")
    (error nil)))

(defun geben-single-or-proxy()
  "Tries calling geben, if it throws an error because it needs to use
   `geben-proxy', it tries that.
   TODO: make it toggle.."
  (interactive)
  (condition-case nil
      (geben)
    (error (geben-proxy "127.0.0.1" 9001 "chris_cc"))))

(defadvice geben-display-context(before clear-windows-for-vars activate)
  (delete-other-windows))

(add-hook 'kill-emacs-hook 'geben-safely-end-proxy)

#+END_SRC
* LISP/SLIME 
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lib/slime/")
(require 'slime)

(slime-setup '(slime-fancy))
(setq inferior-lisp-program (executable-find "sbcl"))

;(load (expand-file-name "~/quicklisp/slime-helper.el"))

(if (file-exists-p (expand-file-name "~/lib/slime-helper.el"))
    (load (expand-file-name "~/lib/slime-helper.el")))


#+END_SRC

* Emacs Speaks Statistics					  :SUBMODULE:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/ESS/lisp/")
(require 'ess-site)
#+END_SRC
* Jabber 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/jabber/")
(require 'jabber)

(setq jabber-account-list '(("kotfic@gmail.com"
			     (:network-server . "talk.google.com")
			     (:port . 5222)
			     (:connection-type . starttls)
			     )
			    ("170_26772@chat.hipchat.com"
			     (:network-server . "chat.hipchat.com" )
			     (:port . 5222)
			     (:connection-type . starttls)
			    )))

(defun jabber-google-groupchat-create ()
  (interactive)
  (let ((group (apply 'format "private-chat-%x%x%x%x%x%x%x%x-%x%x%x%x-%x%x%x%x-%x%x%x%x-%x%x%x%x%x%x%x%x%x%x%x%x@groupchat.google.com"
		      (mapcar (lambda (x) (random x)) (make-list 32 15))))
	(account (jabber-read-account)))
    (jabber-groupchat-join account group (jabber-muc-read-my-nickname account group) t)))

#+END_SRC

** Hipchat
#+BEGIN_SRC emacs-lisp
(defun join-dev ()
  (interactive)
  (jabber-muc-join "170_26772@chat.hipchat.com" "170_dev@conf.hipchat.com" "Christopher Kotfila"))


#+END_SRC
* Github & Gists
** Dependencies
*** logito 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/logito/")
(require 'logito)
#+END_SRC

*** pcache 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/pcache/")
(require 'pcache)

#+END_SRC

** Github 							  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/gh/")
(require 'gh)
#+END_SRC
** Gist								  :SUBMODULE:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/gist/")
(require 'gist)
#+END_SRC
